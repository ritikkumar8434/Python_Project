import os
import requests

def post_to_linkedin(access_token: str, author_urn: str, message: str) -> bool:
    """
    Posts a text-only update to LinkedIn using the UGC API.
    
    :param access_token: OAuth2 bearer token with w_member_social scope.
    :param author_urn: Your LinkedIn URN, e.g., "urn:li:person:YOUR_PERSON_ID".
    :param message: Text content of the post.
    :return: True if successful, False otherwise.
    """
    url = "https://api.linkedin.com/v2/ugcPosts"
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json",
        "X-Restli-Protocol-Version": "2.0.0"
    }
    data = {
        "author": author_urn,
        "lifecycleState": "PUBLISHED",
        "specificContent": {
            "com.linkedin.ugc.ShareContent": {
                "shareCommentary": {"text": message},
                "shareMediaCategory": "NONE"
            }
        },
        "visibility": {
            "com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC"
        }
    }
    resp = requests.post(url, headers=headers, json=data)
    if resp.status_code == 201:
        print("Successfully posted to LinkedIn!")
        return True
    else:
        print(f"Error {resp.status_code}: {resp.text}")
        return False

if __name__ == "__main__":
    ACCESS_TOKEN = os.getenv("LINKEDIN_ACCESS_TOKEN")
    AUTHOR_URN = os.getenv("LINKEDIN_AUTHOR_URN")  # e.g. "urn:li:person:abcdef123"
    MESSAGE = "Hello LinkedIn world! Posting from Python ðŸš€"

    if not ACCESS_TOKEN or not AUTHOR_URN:
        print("Please set LINKEDIN_ACCESS_TOKEN and LINKEDIN_AUTHOR_URN environment variables.")
    else:
        post_to_linkedin(ACCESS_TOKEN, AUTHOR_URN, MESSAGE)
